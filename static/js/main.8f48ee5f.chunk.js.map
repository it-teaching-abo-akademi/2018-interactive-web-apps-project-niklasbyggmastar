{"version":3,"sources":["components/Home.js","components/Create.js","components/Portfolio.js","components/NavBar.js","components/Stock.js","components/App.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createPortfolio","history","push","portfolios","_this2","Storage","localStorage","length","JSON","parse","getItem","console","log","react_default","a","createElement","className","map","portfolio","i","NavLink","to","key","name","onClick","type","Component","Create","save","e","preventDefault","refs","value","data","stocks","alert","setState","state","setItem","stringify","focus","storedPortfolios","ref","htmlFor","confirmRemovePortfolio","confirmAlert","title","message","buttons","label","removePortfolio","splice","id","showAddStocksDialog","customUI","_ref","onClose","onSubmit","addStocks","symbol","onChange","symbolChange","num","numOfSharesChange","stockName","numOfShares","confirmRemoveStock","removeStock","showStock","getValues","url","apiKey","getData","then","res","currentValue","counter","asyncToGenerator","regenerator_default","mark","_callee","api_call","wrap","_context","prev","next","fetch","sent","json","values","keys","parseFloat","valuesArray","catch","error","warn","abrupt","stop","backToHome","totalValue","currentValues","portfolioValue","match","params","bind","assertThisInitialized","target","quantity","stock","getPortfolioValue","NavBar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","activeClassName","LineGraph","labels","time","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","es","height","backToPortfolio","portfolio_id","stock_id","timeArray","item","unshift","Stock_LineGraph","App","HashRouter","NavBar_NavBar","Route","exact","path","component","Portfolio","Stock","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.8f48ee5f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class Home extends Component {\r\n\r\n\t// Needed for global variables\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.portfolios = [];\r\n\t}\r\n\r\n\t// Create new portfolio button calls this. Takes the user to the new portfolio form\r\n\tcreatePortfolio = () => {\r\n\t\tthis.props.history.push(\"/new\");\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Get stored portfolios if there are any\r\n\t\tif (typeof (Storage) !== \"undefined\" && localStorage.length !== 0) {\r\n\t\t\tthis.portfolios = JSON.parse(localStorage.getItem(\"portfolios\"));\r\n\t\t}\r\n\t\tlet portfolios = this.portfolios;\r\n\t\tconsole.log(portfolios);\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t\t{/* If there are any portfolios */}\r\n\t\t\t\t\t{ portfolios.length > 0 &&\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h3 className=\"mb-4\">My portfolios</h3>\r\n\t\t\t\t\t\t\t<div className=\"mb-5\">\r\n\t\t\t\t\t\t\t\t{/* Iterate through the portfolios array and show each item with their name */}\r\n\t\t\t\t\t\t\t\t{ portfolios.map((portfolio, i) =>\r\n\t\t\t\t\t\t\t\t\t// Link to the specific portfolio details page\r\n\t\t\t\t\t\t\t\t\t<NavLink to={\"/portfolio/\" + i} className=\"list-item\" key={i}>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"float-left\">{portfolio.name}</span>\r\n\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-chevron-right\"></i>\r\n\t\t\t\t\t\t\t\t\t</NavLink>\t\t\t\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{/* If there are no portfolios, show message and a create button */}\r\n\t\t\t\t\t{ portfolios.length === 0 &&\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h4>You don't have any portfolios yet</h4>\r\n\t\t\t\t\t\t\t<button onClick={()=>this.createPortfolio()} type=\"button\" className=\"btn btn-success\">Create one</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Create extends Component {\r\n\r\n\t// Needed for global variables\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.portfolios = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Save function takes a name for the portfolio, an empty stocks array is created in the portfolio\r\n\t */\r\n\tsave = (e) => {\r\n\t\te.preventDefault();\r\n\t\tlet name = this.refs.name.value;\r\n\t\tif (!name){\r\n\t\t\talert(\"Enter a name!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Data object representing a portfolio that is attached to the portfolios array\r\n\t\tlet data = {\r\n\t\t\tname: name,\r\n\t\t\tstocks: []\r\n\t\t}\r\n\t\t\r\n\t\t// Check if there are 10 (or more) portfolios and cancel the saving if there is\r\n\t\tif (this.portfolios.length <= 10) {\r\n\t\t\tconsole.log(\"Too many portfolios!\");\r\n\t\t\talert(\"Can not create more than 10 portfolios\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Add portfolio to the array\r\n\t\tthis.portfolios.push(data);\r\n\r\n\t\t// Set the app state\r\n\t\tthis.setState({\r\n\t\t\tstate: this.portfolios\r\n\t\t});\r\n\r\n\t\t// Save the portfolio array to local storage. If there was already a saved item, it is overwritten\r\n\t\tif (typeof(Storage) !== \"undefined\") {\r\n\t\t\tlocalStorage.setItem(\"portfolios\", JSON.stringify(this.portfolios));\r\n\t\t}else{\r\n\t\t\tconsole.log(\"No support for local storage\");\r\n\t\t}\r\n\r\n\t\tconsole.log(this.portfolios);\r\n\t\t// Redirect to the home page\r\n\t\tthis.props.history.push(\"/\");\r\n\t}\r\n\r\n\t// Focus on the name field when component is mounted\r\n\tcomponentDidMount() {\r\n\t\tthis.refs.name.focus();\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Get the stored portfolios if there is any\r\n\t\tif (typeof(Storage) !== \"undefined\" && localStorage.length !== 0) {\r\n\t\t\tthis.storedPortfolios = JSON.parse(localStorage.getItem(\"portfolios\"));\r\n\t\t\tthis.portfolios = this.storedPortfolios;\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t// Simple form with name input and save button\r\n\t\t\t<div>\r\n\t\t\t\t<form className=\"form-group\" ref=\"newPortfolioForm\">\r\n\t\t\t\t\t<label htmlFor=\"name\">Portfolio name</label>\r\n\t\t\t\t\t<input ref=\"name\" type=\"text\" className=\"form-control\" />\r\n\t\t\t\t\t<button onClick={(e)=>this.save(e)} className=\"btn btn-primary w-100 mt-3\">Save</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\nexport default class Home extends Component {\r\n\r\n  // Constructor for making global variables\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name:\"\",\r\n      numOfShares: 0,\r\n      portfolio: {\r\n        name: \"\",\r\n        totalValue: 0,\r\n        stocks: [{\r\n          name: \"\",\r\n          numOfShares: 0,\r\n          currentValue: 0\r\n        }]\r\n      }\r\n    };\r\n    this.url = \"\";\r\n    this.values = [];\r\n    this.valuesArray = [];\r\n    this.currentValue = 0;\r\n    this.currentValues = [];\r\n    this.portfolioValue = 0;\r\n    // Get the portfolio id from the url\r\n    this.id = props.match.params.id;\r\n    this.counter = 0;\r\n\r\n    // Needed for these two functions to work\r\n    this.symbolChange = this.symbolChange.bind(this);\r\n    this.numOfSharesChange = this.numOfSharesChange.bind(this);\r\n\r\n    // Get stored portfolios and set the state so that the portfolios will be updated in the view\r\n    if (typeof (Storage) !== \"undefined\" && localStorage.length !== 0) {\r\n      this.state.portfolio = JSON.parse(localStorage.getItem(\"portfolios\"))[this.id];\r\n    }\r\n    console.log(this.state.portfolio);\r\n    this.apiKey = \"AH3A612TPNUUG8DZ\";\r\n  }\r\n\r\n  // Confirmation popup for removing the portfolio, used react-confirm-alert library\r\n  confirmRemovePortfolio = (e) => {\r\n    confirmAlert({\r\n      title: 'Confirm to remove',\r\n      message: 'Are you sure to remove this portfolio? All of the stocks inside it will also be removed.',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => this.removePortfolio(e)\r\n        },\r\n        {\r\n          label: 'No'\r\n        }\r\n      ]\r\n    })\r\n  }\r\n\r\n  // Called if user selects 'yes' on the confirmation, removes the portfolio.\r\n  // First set the stored portfolios to the global variable and remove the specified portfolio from that\r\n  // and then overwrite the new portfolios array to the local storage\r\n  removePortfolio = (e) => {\r\n    e.preventDefault();\r\n    if (typeof (Storage) !== \"undefined\" && localStorage.length !== 0) {\r\n      this.portfolios = JSON.parse(localStorage.getItem(\"portfolios\"));\r\n      this.portfolios.splice(this.id, 1);\r\n      localStorage.setItem(\"portfolios\", JSON.stringify(this.portfolios));\r\n      // Redirect to home page\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  // When user writes the symbol, set the state\r\n  symbolChange(e) {\r\n    e.preventDefault();\r\n    this.setState({name: e.target.value});\r\n  }\r\n\r\n  // When user writes the number of shares, set the state\r\n  numOfSharesChange(e) {\r\n    e.preventDefault();\r\n    this.setState({numOfShares: e.target.value}); \r\n  }\r\n\r\n  // Add stocks popup dialog, gets the symbol and number of shares\r\n  showAddStocksDialog = (e) => {\r\n    e.preventDefault();\r\n    confirmAlert({\r\n      customUI: ({ onClose }) => {\r\n        return (\r\n          <div className='addStockDiv'>\r\n            <h1>Add a stock</h1>\r\n            {/* When form is submitted, call addStocks and close the dialog */}\r\n            <form onSubmit={()=>{\r\n              this.addStocks()\r\n              onClose()\r\n              }} className=\"form-group\">\r\n              <label htmlFor=\"symbol\">Symbol</label>\r\n              <input value={this.state.symbol} onChange={this.symbolChange} type=\"text\" className=\"form-control\" />\r\n              <label htmlFor=\"numOfShares\">Number of shares</label>\r\n              <input value={this.state.num} onChange={this.numOfSharesChange} type=\"number\" className=\"form-control mb-3\" />\r\n              <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>Cancel</button>\r\n              <input type=\"submit\" value=\"Add\" className=\"btn btn-success w-50 float-right\" />\r\n            </form>\r\n          </div>\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  addStocks = () => {\r\n    let stockName = this.state.name;\r\n    let numOfShares = this.state.numOfShares;\r\n    // Check if the stock name and quantity are entered\r\n    if (stockName.length > 0 && numOfShares.length > 0) {\r\n      // Check if the stock name length is 3 or 4\r\n      if (stockName.length >= 3 && stockName.length <= 4){\r\n        // Get the current portfolio\r\n        let portfolio = this.state.portfolio;\r\n        if (portfolio.stocks.length <= 50) {\r\n          // Push the stock item to the stocks array in the portfolio if there's less than 50 stock symbols\r\n          portfolio.stocks.push({\r\n            name: stockName,\r\n            numOfShares: numOfShares\r\n          });\r\n          this.setState({\r\n            portfolio: portfolio\r\n          })\r\n          console.log(portfolio);\r\n          // Get the stored portfolios array and overwrite the specified portfolio with new data \r\n          //and then overwrite the stored portfolios array\r\n          let portfolios = JSON.parse(localStorage.getItem(\"portfolios\"));\r\n          portfolios[this.id] = portfolio;\r\n          localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\r\n          this.setState({\r\n            name: \"\",\r\n            numOfShares: 0\r\n          })\r\n        }else{\r\n          alert(\"Can not have more than 50 symbols in a portfolio\");\r\n        }\r\n      }else{\r\n        alert(\"Symbol must be 3 or 4 characters long\");\r\n      }\r\n    }else{\r\n      alert(\"Please fill in all the fields\");\r\n    }\r\n  }\r\n\r\n  // Confirmation popup dialog for removing a stock\r\n  confirmRemoveStock = (e,i) => {\r\n    confirmAlert({\r\n      title: 'Confirm to remove',\r\n      message: 'Are you sure to remove this stock?',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => this.removeStock(e,i)\r\n        },\r\n        {\r\n          label: 'No'\r\n        }\r\n      ]\r\n    })\r\n  }\r\n\r\n  // Removes the specified stock\r\n  // Get the stored portfolios array and overwrite with new portfolio where the stock has been deleted\r\n  removeStock = (e,i) => {\r\n    e.preventDefault();\r\n    let portfolio = this.state.portfolio;\r\n    this.state.portfolio.stocks.splice(i,1);\r\n    console.log(this.state.portfolio);\r\n    this.setState({\r\n      portfolio: portfolio\r\n    })\r\n    let portfolios = JSON.parse(localStorage.getItem(\"portfolios\"));\r\n    portfolios[this.id] = portfolio;\r\n    localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\r\n  }\r\n\r\n  // Confirmation popup dialog for removing the portfolio\r\n  confirmRemovePortfolio = (e) => {\r\n    e.preventDefault();\r\n    confirmAlert({\r\n      title: 'Confirm to remove',\r\n      message: 'Are you sure to remove this portfolio? All of the stocks inside it will also be removed.',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => this.removePortfolio(e)\r\n        },\r\n        {\r\n          label: 'No'\r\n        }\r\n      ]\r\n    })\r\n  }\r\n\r\n  // Take the user to the stock details page\r\n  showStock = (e,i) => {\r\n    e.preventDefault();\r\n    this.props.history.push(\"/portfolio/\"+this.id+\"/stock/\"+i);\r\n  }\r\n\r\n  // Get the stock current values from the API\r\n  getValues = (symbol,i) => {\r\n    this.url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\" + symbol + \"&interval=5min&apikey=\" + this.apiKey;\r\n    this.getData().then(res=>{\r\n      this.currentValue = res[0];\r\n      // To avoid infinite loop (more like a quick hack than something smart)\r\n      if (this.counter === 1) {\r\n        console.log(res);\r\n        let portfolio = this.state.portfolio;\r\n        portfolio.stocks[i].currentValue = this.currentValue;\r\n        this.setState({portfolio: this.state.portfolio});\r\n        this.counter++;\r\n      }\r\n      \r\n    });\r\n    \r\n  }\r\n\r\n  // Get the data from the API and return an array that contains all the values\r\n  getData = async () => {\r\n    const api_call = await fetch(this.url);\r\n    await api_call.json().then(data => {\r\n      this.values = data['Time Series (Daily)'];\r\n      Object.keys(this.values).map((key)=> {\r\n        // Used the 4. close values\r\n        let value = parseFloat(this.values[key]['4. close']);\r\n        this.valuesArray.push(value);\r\n      })\r\n    }).catch(error => {\r\n      console.warn(error);\r\n    });\r\n    return this.valuesArray;\r\n  }\r\n\r\n  // For getting the full portfolio value, not working but tried something...\r\n  getPortfolioValue () {\r\n    // To avoid infinite loop (more like a quick hack than something smart)\r\n    if (this.counter === 0){\r\n      let stocks = this.state.portfolio.stocks;\r\n      for (let i=0; i< stocks.length;i++){\r\n        console.log(stocks[i]);\r\n        let value = stocks[i].currentValue;\r\n        let quantity = parseFloat(stocks[i].numOfShares);\r\n        console.log(value, quantity);\r\n        this.portfolioValue += value*quantity;\r\n      }\r\n      this.counter++;\r\n      console.log(this.portfolioValue);\r\n      let portfolio = this.state.portfolio;\r\n      portfolio.totalValue = this.portfolioValue;\r\n      this.setState({\r\n        portfolio: portfolio\r\n      })\r\n    }\r\n  }\r\n\r\n  // Back button link to home page\r\n  backToHome = () => {\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  componentDidMount (){\r\n    this.setState({\r\n      values: this.values,\r\n      currentValue: this.currentValue\r\n    })\r\n  }\r\n\r\n\trender() {\r\n    let portfolio = this.state.portfolio;\r\n    console.log(portfolio);\r\n\t\treturn (\r\n\t\t\t<div>\r\n        <span onClick={() => this.backToHome()} className=\"backBtn\"><i className=\"fas fa-arrow-left mb-3\"></i> back</span>\r\n        {/* If the given portfolio exists */}\r\n        { portfolio &&\r\n          <div>\r\n            <h4 className=\"mb-3\">Portfolio: {portfolio.name}</h4>\r\n            {/* If the portfolio contains stocks, show them */}\r\n            { portfolio && portfolio.stocks.length > 0 &&\r\n              <div>\r\n                <h5>\r\n                  Stocks\r\n                  {/* If there's max 50 stocks, show the add stocks button */}\r\n                  {portfolio.stocks.length <= 50 &&\r\n                    <i className=\"fas fa-plus float-right btn btn-success\" onClick={(e)=>this.showAddStocksDialog(e)}></i>\r\n                  }\r\n                </h5>\r\n                {/* Table that contains all the stock data */}\r\n                <table className=\"table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Name</th>\r\n                      <th>Quantity</th>\r\n                      <th>Unit value</th>\r\n                      <th>Total value</th>\r\n                      <th></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {/* Iterate through the stocks array and show each one's details */}\r\n                    {portfolio.stocks.map((stock, i) =>\r\n                      <tr key={i}>\r\n                        {this.getValues(stock.name,i)}\r\n                        <th onClick={e=>this.showStock(e,i)}>{stock.name}</th>\r\n                        <th onClick={e=>this.showStock(e,i)}>{stock.numOfShares}</th>\r\n                        <th onClick={e=>this.showStock(e,i)}>{stock.currentValue} €</th>\r\n                        <th onClick={e=>this.showStock(e,i)}>{stock.currentValue*stock.numOfShares} €</th>\r\n                        {/* Remove stock button for each row */}\r\n                        <th>\r\n                          <i onClick={e=>this.confirmRemoveStock(e,i)} className=\"fas fa-trash\"></i>\r\n                        </th>\r\n                      </tr>\r\n                    )}\r\n                  <tr>\r\n                    <th>Portfolio value</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                    <th>{this.getPortfolioValue()} €</th>\r\n                    <th></th>\r\n                  </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            }\r\n            {/* If there are no stocks in the portfolio */}\r\n            { portfolio.stocks.length === 0 &&\r\n              <div>\r\n                <h4>You don't have any stocks in this portfolio</h4>\r\n                <button type=\"button\" className=\"btn btn-success mb-3\" onClick={(e)=>this.showAddStocksDialog(e)}>Add stocks</button>\r\n              </div>\r\n            }\r\n            <button type=\"button\" className=\"btn btn-danger\" onClick={(e)=>this.confirmRemovePortfolio(e)}>Remove portfolio</button>\r\n          </div>\r\n        }\r\n        {/* If the given portfolio does not exist */}\r\n        { !portfolio &&\r\n          <h4>This portfolio does not exist</h4>\r\n        }\r\n        \r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class NavBar extends Component {\r\n\r\n  // Navigation bar at the top, uses a basic bootstrap navbar\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n          {/* Link to the home page */}\r\n          <NavLink className=\"navbar-brand\" to=\"/\">SPMS</NavLink>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              {/* Link to the new portfolio page */}\r\n              <li className=\"nav-item\">\r\n                <NavLink activeClassName=\"active\" className=\"nav-link\" to=\"/new\">New portfolio</NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\n// Graph object, used the react-chartjs-2 with chart.js\r\nconst LineGraph = (props) => {\r\n  const data = {\r\n    labels: props.time,\r\n    datasets: [\r\n      {\r\n        label: props.symbol,\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: props.values\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <Line height={280} data={data} />\r\n  )\r\n}\r\n\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apiKey = \"AH3A612TPNUUG8DZ\";\r\n    // Get the portfolio id and stock id from the url\r\n    this.portfolio_id = props.match.params.id;\r\n    this.stock_id = props.match.params.stock_id;\r\n    this.state = {};\r\n    this.values = [];\r\n\r\n    // Get the stored portfolios and store in the state\r\n    if (typeof (Storage) !== \"undefined\" && localStorage.length !== 0) {\r\n      this.state.portfolio = JSON.parse(localStorage.getItem(\"portfolios\"))[this.portfolio_id];\r\n    }\r\n    console.log(this.state.portfolio);\r\n    // Set the stock variable using the stock id\r\n    this.stock = this.state.portfolio.stocks[this.stock_id];\r\n    // If there are stocks, get the data from the API\r\n    if (this.stock){\r\n      this.url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\" + this.stock.name + \"&interval=5min&apikey=\" + this.apiKey;\r\n      this.getData();\r\n    } \r\n  }\r\n\r\n  // Get the stock data from the api\r\n  getData = async () => {\r\n    const api_call = await fetch(this.url);\r\n    await api_call.json().then(data => {\r\n      console.log(data);\r\n      this.values = data['Time Series (Daily)'];\r\n      this.setState({\r\n        values: this.values\r\n      });\r\n    }).catch(error => {\r\n      console.warn(error);\r\n    });\r\n  }\r\n\r\n  // Set the state with values\r\n  componentWillMount() {\r\n    this.setState({\r\n      values: this.values\r\n    })\r\n  }\r\n\r\n  // Back button takes to the portfolio\r\n  backToPortfolio = () => {\r\n    this.props.history.push(\"/portfolio/\" + this.portfolio_id);\r\n  }\r\n\r\n  render() {\r\n    let values = this.state.values;\r\n    let stock = this.stock;\r\n    let valuesArray = [];\r\n    let timeArray = [];\r\n\r\n    // If there are values, iterate through the values array and put the stock values and\r\n    // the corresponding dates to arrays\r\n    if (values){\r\n      Object.keys(values).map((key)=> {\r\n        let item = parseFloat(values[key]['4. close']);\r\n        let time = key;\r\n        valuesArray.unshift(item);\r\n        timeArray.unshift(time);\r\n      })\r\n    }else{\r\n      alert(\"Stock data is currently unavailable, please try again later\");\r\n    }\r\n    \r\n    // Current value will be the last item in the values array\r\n    let currentValue = valuesArray[valuesArray.length-1];\r\n\r\n    return (\r\n      <div>\r\n        {/* If the stock exists, show the data */}\r\n        {stock &&\r\n          <div>\r\n            <span onClick={() => this.backToPortfolio()} className=\"backBtn\"><i className=\"fas fa-arrow-left mb-3\"></i> back</span>\r\n            <h4>Stock: {this.stock.name}</h4>\r\n            <h6>Current value: {currentValue} €</h6>\r\n            {/* The line graph component is rendered here with the desired properties */}\r\n            <LineGraph symbol={stock.name} values={valuesArray} time={timeArray} />\r\n          </div>\r\n        }\r\n        {/* If the stock does not exist */}\r\n        {!stock &&\r\n          <h4>This stock does not exist</h4>      \r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Route, HashRouter } from 'react-router-dom';\r\n\r\nimport Home from \"./Home\";\r\nimport Create from \"./Create\";\r\nimport Portfolio from \"./Portfolio\";\r\nimport NavBar from \"./NavBar\";\r\nimport Stock from \"./Stock\";\r\n\r\nexport default class App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      /* HashRouter contains the area where all the navigation happens */\r\n      <HashRouter>\r\n        <div>\r\n          {/* The navigation bar */}\r\n          <NavBar />\r\n          <div className=\"content\">\r\n            {/* Specify different url routes and bind them with components */}\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route path=\"/new\" component={Create}/>\r\n            <Route exact path=\"/portfolio/:id\" component={Portfolio}/>\r\n            <Route path=\"/portfolio/:id/stock/:stock_id\" component={Stock}/>\r\n          </div>\r\n        </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\nimport App from './components/App';\r\n\r\n// Entry point, render the App component in the root div that is in the index.html\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}